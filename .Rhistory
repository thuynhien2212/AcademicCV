blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
Courses included:
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
setwd()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
remotes::install_github('rstudio/blogdown')
setwd()
getwd()
setwd("D://OUCRU//OneDrive//Desktop//Task//1_Portfolio//CV//test")
remotes::install_github('rstudio/blogdown')
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
library(ggplot2)
n <- 20 # set sample size
nsims <- 100000 # set number of simulations
x <- rnorm(n = n, mean = 100, sd = 15) # create sample from normal distribution
# 95% Confidence Interval
ciu <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
cil <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
# 95% Prediction Interval
piu <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 + 1 / n)
pil <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 + 1 / n)
ggplot(as.data.frame(x), aes(x)) + # plot data
geom_rect(aes(xmin = pil, xmax = piu, ymin = 0, ymax = Inf),
fill = "gold") + # draw yellow PI area
geom_rect(aes(xmin = cil, xmax = ciu, ymin = 0, ymax = Inf),
fill = "#E69F00") + # draw orange CI area
geom_histogram(colour = "black", fill = "grey", aes(y = after_stat(density)), bins = 20) +
xlab("Score") +
ylab("frequency") +
theme_bw(base_size = 20) +
theme(panel.grid.major.x = element_blank(), axis.text.y = element_blank(),
panel.grid.minor.x = element_blank()) +
geom_vline(xintercept = mean(x), linetype = "dashed", linewidth = 1) +
coord_cartesian(xlim = c(50, 150)) +
scale_x_continuous(breaks = c(seq(50, 150, 10))) +
annotate("text", x = mean(x), y = 0.02, label = paste(
"Mean = ", round(mean(x)), "\n",
"SD = ", round(sd(x)), sep = ""), size = 6.5)
# Simulate Confidence Intervals
ciu_sim <- numeric(nsims)
cil_sim <- numeric(nsims)
mean_sim <- numeric(nsims)
for (i in 1:nsims) { # for each simulated experiment
x <- rnorm(n = n, mean = 100, sd = 15) # create sample from normal distribution
ciu_sim[i] <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
cil_sim[i] <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
mean_sim[i] <- mean(x) # store means of each sample
}
# Save only those simulations where the true value was inside the 95% CI
ciu_sim <- ciu_sim[ciu_sim < 100]
cil_sim <- cil_sim[cil_sim > 100]
# Calculate how many times the observed mean fell within the 95% CI of the original study
mean_sim <- mean_sim[mean_sim > cil & mean_sim < ciu]
cat((100 * (1 - (length(ciu_sim) / nsims + length(cil_sim) / nsims))),
"% of the 95% confidence intervals contained the true mean")
cat("The capture percentage for the plotted study, or the % of values within
the observed confidence interval from", cil, "to", ciu,
"is:", 100 * length(mean_sim) / nsims, "%")
set.seed(1000)
n <- 94 # set sample size
library(ggplot2)
set.seed(1000)
n <- 94 # set sample size
nsims <- 100000 # set number of simulations
x <- rnorm(n = n, mean = 100, sd = 15) # create sample from normal distribution
# 95% Confidence Interval
ciu <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
cil <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
# 95% Prediction Interval
piu <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 + 1 / n)
pil <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 + 1 / n)
ggplot(as.data.frame(x), aes(x)) + # plot data
geom_rect(aes(xmin = pil, xmax = piu, ymin = 0, ymax = Inf),
fill = "gold") + # draw yellow PI area
geom_rect(aes(xmin = cil, xmax = ciu, ymin = 0, ymax = Inf),
fill = "#E69F00") + # draw orange CI area
geom_histogram(colour = "black", fill = "grey", aes(y = after_stat(density)), bins = 20) +
xlab("Score") +
ylab("frequency") +
theme_bw(base_size = 20) +
theme(panel.grid.major.x = element_blank(), axis.text.y = element_blank(),
panel.grid.minor.x = element_blank()) +
geom_vline(xintercept = mean(x), linetype = "dashed", linewidth = 1) +
coord_cartesian(xlim = c(50, 150)) +
scale_x_continuous(breaks = c(seq(50, 150, 10))) +
annotate("text", x = mean(x), y = 0.02, label = paste(
"Mean = ", round(mean(x)), "\n",
"SD = ", round(sd(x)), sep = ""), size = 6.5)
# Simulate Confidence Intervals
ciu_sim <- numeric(nsims)
cil_sim <- numeric(nsims)
mean_sim <- numeric(nsims)
for (i in 1:nsims) { # for each simulated experiment
x <- rnorm(n = n, mean = 100, sd = 15) # create sample from normal distribution
ciu_sim[i] <- mean(x) + qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
cil_sim[i] <- mean(x) - qt(0.975, df = n - 1) * sd(x) * sqrt(1 / n)
mean_sim[i] <- mean(x) # store means of each sample
}
# Save only those simulations where the true value was inside the 95% CI
ciu_sim <- ciu_sim[ciu_sim < 100]
cil_sim <- cil_sim[cil_sim > 100]
# Calculate how many times the observed mean fell within the 95% CI of the original study
mean_sim <- mean_sim[mean_sim > cil & mean_sim < ciu]
cat((100 * (1 - (length(ciu_sim) / nsims + length(cil_sim) / nsims))),
"% of the 95% confidence intervals contained the true mean")
cat("The capture percentage for the plotted study, or the % of values within
the observed confidence interval from", cil, "to", ciu,
"is:", 100 * length(mean_sim) / nsims, "%")
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
##blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
